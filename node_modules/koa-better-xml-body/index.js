'use strict';

const util = require('util');
const x2js = require('x2js');
const rawBody = require('raw-body');

const limit = '1mb';
const encoding = 'utf8';

function xmlObjectSimplify(base) {
    if (base.hasOwnProperty('toString')) {
        return base.toString();
    } else {
        const ret = {};
        for (let key in base) {
            if (typeof base[key] === 'object') {
                if (! util.isNullOrUndefined(base[key].length)) {
                    ret[key] = [];
                    for (let i = 0; i < base[key].length; ++i) {
                        ret[key].push(xmlObjectSimplify(base[key][i]));
                    }
                } else if (base[key].hasOwnProperty('toString')) {
                    ret[key] = base[key].toString();
                } else {
                    ret[key] = xmlObjectSimplify(base[key]);
                } 
            } else {
                ret[key] = base[key];
            }
        }
    return ret;
    }
}

module.exports = () => {
    let options = { limit, encoding }
    return (ctx, next) => {
        if (ctx.request.body === undefined && ctx.is('application/xml', 'text/xml', 'xml') && /^(POST|PUT|PATCH)$/i.test(ctx.method)) {
            const len = ctx.request.headers['content-length'];
            options.length = len;

            if (! util.isNullOrUndefined(ctx.request.charset)) {
                options.encoding = ctx.request.charset;
            }

            return rawBody(ctx.req).then((buf) => {
                const xmlObj = (new x2js).xml2js(buf.toString());
                ctx.request.xml = xmlObj;
                ctx.request.body = xmlObjectSimplify(xmlObj);
                return next();
            }).catch((e) => {
                throw e;
            });
        } else {
            return next();
        }
    }
}
